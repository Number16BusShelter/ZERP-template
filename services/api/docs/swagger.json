{
  "openapi": "3.0.0",
  "info": {
    "title": "Api Swagger",
    "version": "0.0.1",
    "description": "API documentation",
    "contact": {
      "name": "Clicker bot backend",
      "email": ""
    }
  },
  "host": "example.com",
  "basePath": "/",
  "externalDocs": {
    "description": "View the raw OpenAPI Specification in JSON format",
    "url": "/swagger.json"
  },
  "paths": {
    "/auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Registration complete",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "statusCode": {
                      "type": "number",
                      "example": 200
                    },
                    "code": {
                      "type": "string",
                      "description": "Service response code. May missmatch http-code. See service error definitions.",
                      "example": "200"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message that shown to user",
                      "example": "Error message"
                    },
                    "data": {
                      "type": "object",
                      "properties": {}
                    }
                  },
                  "description": "Registration complete"
                }
              }
            }
          },
          "400": {
            "description": "Validation failure",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "code": {
                      "type": "string",
                      "description": "Service response code. May missmatch http-code. See service error definitions.",
                      "example": "200"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message that shown to user",
                      "example": "Error message"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "statusCode": {
                          "type": "number",
                          "example": 1212
                        }
                      },
                      "required": [
                        "statusCode"
                      ]
                    }
                  },
                  "description": "Validation failure"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "statusCode": {
                      "type": "number",
                      "example": 403
                    },
                    "code": {
                      "type": "string",
                      "description": "Service response code. May missmatch http-code. See service error definitions.",
                      "example": "200"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message that shown to user",
                      "example": "Error message"
                    },
                    "data": {
                      "type": "object",
                      "properties": {}
                    }
                  },
                  "description": "Forbidden"
                }
              }
            }
          }
        }
      }
    },
    "/example/authenticated": {
      "post": {
        "tags": [
          "Example"
        ],
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "Authorization",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "statusCode": {
                      "type": "number",
                      "example": 200
                    },
                    "code": {
                      "type": "string",
                      "description": "Service response code. May missmatch http-code. See service error definitions.",
                      "example": "200"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message that shown to user",
                      "example": "Error message"
                    },
                    "data": {
                      "type": "object",
                      "properties": {}
                    }
                  },
                  "description": "Authenticated"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "code": {
                      "type": "string",
                      "description": "Service response code. May missmatch http-code. See service error definitions.",
                      "example": "200"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message that shown to user",
                      "example": "Error message"
                    },
                    "data": {
                      "type": "object",
                      "properties": {}
                    }
                  },
                  "description": "Unauthenticated"
                }
              }
            }
          }
        }
      }
    },
    "/ton-connect/manifest.json": {
      "get": {
        "description": "TONConnect Manifest file",
        "summary": "TONConnect manifest.json",
        "tags": [
          "TONConnect"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Unknown server error"
          }
        }
      }
    },
    "/ton-connect/check-proof": {
      "post": {
        "description": "Send proof for validation",
        "summary": "Send proof",
        "tags": [
          "TONConnect"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Unknown server error"
          }
        }
      }
    },
    "/ton-connect/generate-payload": {
      "post": {
        "description": "Get payload for proof generation",
        "summary": "Payload for proof generation",
        "tags": [
          "TONConnect"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Unknown server error"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "apiKey": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization"
      }
    },
    "schemas": {
      "PaginationRequestSchema": {
        "type": "object",
        "properties": {
          "take": {
            "type": "number",
            "minimum": 1,
            "description": "The number of items to retrieve per page"
          },
          "page": {
            "type": "number",
            "minimum": 1,
            "description": "The page number to retrieve"
          },
          "sortOrder": {
            "type": "string",
            "enum": [
              "ASC",
              "DESC"
            ],
            "description": "The order in which to sort the leaderboard"
          },
          "search": {
            "type": "string"
          }
        }
      },
      "PaginationResponseSchema": {
        "type": "object",
        "properties": {
          "count": {
            "type": "number",
            "description": "Total number of items available",
            "example": 100
          },
          "currentPage": {
            "type": "number",
            "description": "The current page number",
            "example": 1
          },
          "nextPage": {
            "type": "number",
            "nullable": true,
            "description": "Next page number, if available",
            "example": 2
          },
          "prevPage": {
            "type": "number",
            "nullable": true,
            "description": "Previous page number, if available"
          },
          "lastPage": {
            "type": "number",
            "description": "The last available page number",
            "example": 10
          }
        },
        "required": [
          "count",
          "currentPage",
          "nextPage",
          "prevPage",
          "lastPage"
        ]
      },
      "RegisterRequest": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "minLength": 2,
            "description": "User's first name",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "minLength": 2,
            "description": "User's last name",
            "example": "Doe"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address",
            "example": "john.doe@example.com"
          },
          "phoneNumber": {
            "type": "string",
            "minLength": 10,
            "description": "User's phone number",
            "example": "+1234567890"
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "format": "password",
            "pattern": "[A-Z]",
            "description": "User's password"
          },
          "confirmPassword": {
            "type": "string",
            "format": "password",
            "description": "Password confirmation"
          },
          "termsAccepted": {
            "type": "boolean",
            "enum": [
              true
            ],
            "description": "User must accept terms and privacy policy",
            "example": true
          },
          "captchaToken": {
            "type": "string",
            "minLength": 1,
            "description": "CAPTCHA verification token"
          }
        },
        "required": [
          "firstName",
          "lastName",
          "email",
          "phoneNumber",
          "password",
          "confirmPassword",
          "termsAccepted",
          "captchaToken"
        ]
      }
    },
    "parameters": {}
  },
  "tags": []
}